/// ==============================================================================
/// ARSC (A Relatively Simple Computer) License
/// ==============================================================================
/// 
/// ARSC is distributed under the following BSD-style license:
/// 
/// Copyright (c) 2016-2017 Dzanan Bajgoric
/// All rights reserved.
/// 
/// Redistribution and use in source and binary forms, with or without modification,
/// are permitted provided that the following conditions are met:
/// 
/// 1. Redistributions of source code must retain the above copyright notice, this
///    list of conditions and the following disclaimer.
/// 
/// 2. Redistributions in binary form must reproduce the above copyright notice, this
///    list of conditions and the following disclaimer in the documentation and/or other
///    materials provided with the distribution.
/// 
/// 3. The name of the author may not be used to endorse or promote products derived from
///    this product without specific prior written permission from the author.
/// 
/// 4. Products derived from this product may not be called "ARSC" nor may "ARSC" appear
///    in their names without specific prior written permission from the author.
/// 
/// THIS PRODUCT IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
/// BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
/// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
/// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO
/// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
/// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
/// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
/// OF THIS PRODUCT, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
///
///
/// ARSC SYSTEM
///
/// Combines ARSC CPU, SDRAM controller and I/O interfaces into the ARSC system
module arsc_system
(
	/// Input signals
	input wire ref_clk,				/// System and SDRAM clks are derived from the reference clk
	input wire reset_n,
	input wire start_n,				/// High -> Low causes ARSC to run (if not already running)
	output wire running,			/// High if ARSC is currently active
	
	/// SDRAM signals
	output wire [12:0] dram_addr,	/// RAM address generated by the SDRAM controller
	output wire [1:0] dram_ba,		/// RAM bank address
	output wire dram_cas_n,			/// Column address strobe
	output wire dram_cke,			/// Clock enable
	output wire dram_cs_n,			/// Chip select
	inout wire  [15:0] dram_dq,		/// Data to write to or data read from RAM
	output wire [1:0]  dram_dqm,	/// Data mask
	output wire dram_ras_n,			/// Row address strobe
	output wire dram_we_n,			/// Write enable
	output wire dram_clk,			/// SDRAM clock (to eliminate the clock skew effect its phase is
									/// shifted by -3ns compared to the system clock)
	
	/// To VGA
	output wire [3:0] vga_r,		/// Red color signal
	output wire [3:0] vga_g,		/// Green color signal
	output wire [3:0] vga_b,		/// Blue color signal
	output wire vga_hs,				/// Horizontal sync
	output wire vga_vs				/// Vertical sync
);

	/// ARSC is a 16-bit computer
	localparam
		N = 16
		, DEBOUNCER_INIT = 1000000;
	
	/// Use on-chip RAM for main memory
	localparam MEMORY_TYPE = 0;
	
	wire
		sys_clk
		, actual_start_n
		, read_n
		, write_n
		, rd_data_valid
		, wait_req
		, io_done
		, rd_indev_n
		, wr_outdev_n
		, io_device;
	
	wire [N-1:0]
		wr_data
		, rd_data
		, addr
		, dil;
	
	/// PLL (sys_clk and dram_clk are 50MHz clocks)
	pll pll_unit
	(
		.refclk   (ref_clk),
		.rst      (~reset_n),
		.outclk_0 (sys_clk),
		.outclk_1 (dram_clk),	/// Phase-shifted by -3ns compared to sys_clk
		.locked   ()
	);
	
	/// Debouncer (and edge detector)
	debouncer #(.INIT(DEBOUNCER_INIT))
		db_unit(
			.clk(sys_clk)
			, .reset_n(reset_n)
			, .in(start_n)
			, .db_level()
			, .db_tick()
			, .db_tick_n(actual_start_n));
	
	/// Memory controller
	memory_controller
	#(
		.MEMORY_TYPE(MEMORY_TYPE)
		, .N(N)
	)
	memory_ctrl_unit
	(
		.clk(sys_clk),
		.reset_n(reset_n),
		.address(addr),
		.wr_data(wr_data),
		.read_n(read_n),
		.write_n(write_n),
		.rd_data(rd_data),
		.rd_data_valid(rd_data_valid),
		.wait_req(wait_req),
		
		/// To SDRAM
		.dram_addr(dram_addr),
		.dram_ba(dram_ba),
		.dram_cas_n(dram_cas_n),
		.dram_cke(dram_cke),
		.dram_cs_n(dram_cs_n),
		.dram_dq(dram_dq),
		.dram_dqm(dram_dqm),
		.dram_ras_n(dram_ras_n),
		.dram_we_n(dram_we_n)
	);
	
	/// ARSC CPU
	arsc_cpu #(.N(N))
        cpu_unit(
			.clk(sys_clk)
			, .reset_n(reset_n)
			, .start_n(actual_start_n)
			, .rd_data_valid(rd_data_valid)
			, .wait_req(wait_req)
			, .io_done(io_done)
			, .rd_data(rd_data)
			, .dil(dil)
			, .read_n(read_n)
			, .write_n(write_n)
			, .rd_indev_n(rd_indev_n)
			, .wr_outdev_n(wr_outdev_n)
			, .io_dev(io_device)
			, .addr(addr)
			, .wr_data(wr_data)
			, .running(running));
	
	/// I/O Controller
	io_controller
	#(
		.N(N)
	)
	io_ctrl_unit
	(
		.clk(sys_clk)
		, .reset_n(reset_n)
		, .start_n(actual_start_n)
		, .io_device(io_device)
		, .rd_input_n(rd_indev_n)
		, .wr_output_n(wr_outdev_n)
		, .addr(addr)
		, .wr_data(wr_data)
		, .io_done(io_done)
		, .rd_data(dil)
		, .vga_r(vga_r)
		, .vga_g(vga_g)
		, .vga_b(vga_b)
		, .vga_hs(vga_hs)
		, .vga_vs(vga_vs)
	);

endmodule
	